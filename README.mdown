sartFileTool for Lion & Mountain Lion
===================================
sartFileTool is a command line tool for encoding and decoding the SArtFile.bin (Shared ArtFile) found in `/System/Library/PrivateFrameworks/CoreUI.framework/Versions/A/SArtFile.bin`. It its current state it can flawlessly decode and encode SArtFile.bin. 

You can find the ArtFile.bin counterpart [here!](https://github.com/alexzielenski/artFileTool).

In the recent update I refactored the code to be more object oriented for easy "plug and play" for Cocoa applications. They can now internally alter the SArtFile.bin contents without writing to disk right away. Also, the new version supports the encoding of SArtFiles without the help of the originally encoded one – it creates all the data itself.

Usage
===
The tool is pretty straightforward to use. Specify -e or -d for encode or decode, respectively. Optionally, you can specify the operating system for the file being decoded/encoded using the -os option with an argument. (e.g. `-os 10.7.4`).

The tool has a few new features that would be helpful to the end-user:
<ol>
	<li>When decoding, not specifying a SArtFile.bin decode causes the tool to automatically pull the one installed on your system at <code>/System/Library/PrivateFrameworks/CoreUI.framework/Resources/SArtFile.bin</code>.
	<li>The encoding part of the tool no longer needs the originally decoded SArtFile.bin to create a new one from the specified folder.
	<li>Better exception/error catching</li>
	<li><code>-os</code> option is not longer required. The tool will use the version installed on your system if none is specified</li>
</ol>

To decode the SArtFile.bin installed on your system to a folder called `sartFiles`:

```
$ cd path/To/sartFileTool/Directory
$ ./sartFileTool -d sartFiles
```

The tool would decode the installed SArtFile.bin into a directory called `sartFiles` using the current Mac OS X version.

To encode this directory back into a SArtFile.bin after making changes to it:

```
$ ./sartFileTool -e sartFiles SArtFile.new.bin
```

Changes to structure
===

Previous versions of SArtFileTool had images with @2x or pdfs and such. This version does not. Instead, each file follows this format: `fileIndex-imageIndex`; where the fileIndex is the 0-based index the file lies within the SArtFile.bin, and the imageIndex is the 1-based index where the image lies within its file.

For example, for a PNG file with a retina resource at index 0, the legacy image would be at 0-1, and the retina image would be at 0-2. This new format calls for more organization within the SArtFile.bin and makes it more future proof.

In addition to the new naming structure, each decoded folder now gets a file called `_receipt.plist`. This receipt contains some information that the encoder might need to know about the folder like the OS of the decoded file.

Specification
===
The SArtFile.bin is composed of five key components:

<ul> 
<li>Master Header</li>
<li>Descriptor Offsets</li>
<li><b>In Progress</b>: Unknown</li>
<li>Descriptors</li>
<li>File Data</li>
</ul>

### Master Header

First 8 bytes of the SArtFile.bin. Gives some key information about the file.

<table>
	<tr>
		<th>Offset</th>
		<th>Size</th>
		<th>Type</th>
		<th>Purpose</th>
	</tr>
	<tr>
		<td>0</td>
		<td>2</td>
		<td>uint16_t</td>
		<td>Believed to be a version number. Only found to be 2 right now.</td>
	</tr>
	<tr>
		<td>2</td>
		<td>2</td>
		<td>uint16_t</td>
		<td>Amount of file descriptors found within the container.</td>
	</tr>
	<tr>
		<td>4</td>
		<td>4</td>
		<td>uint32_t</td>
		<td>"Master offset" at which the file data begins. All file data offsets in descriptors is offset by this number.</td>
	</tr>
	<tr>
		<td>8</td>
		<td>…</td>
		<td>uint32_t</td>
		<td>4 * fileCount size. A list of offsets to each file descriptor.</td>
	</tr>
</table>

### Unknown

Currently, SArtFileTool copies this sector of bytes into the "buffer1" key of the receipt.

I recently found this new sector of 820 bytes (824 under 10.8). It is a very odd area. I investigated this under 10.7.4. They seem to be in 8 byte groupings in this format:

***Format on 10.7.4***

<table>
	<tr>
		<th>Offset</th>
		<th>Size</th>
		<th>Type</th>
		<th>Purpose</th>
	</tr>
	<tr>
		<td>0</td>
		<td>2</td>
		<td>uint16_t</td>
		<td>Appears to be an offset to file data</td>
	</tr>
	<tr>
		<td>2</td>
		<td>2</td>
		<td>uint16_t</td>
		<td>Looks like a Mac OS X version number. I have seen this to be 1073 and 1074 so far.</td>
	</tr>
	<tr>
		<td>4</td>
		<td>4</td>
		<td>uint32_t</td>
		<td>So far only a 1</td>
	</tr>
</table>

This is very uneven, it ents with an offset/version grouping and ends with an offset/version grouping so there are 4 bytes of 1 missing.

***Format on 10.8***

On the latest build of 10.8, the format is fairly similar. There did seem to be build numbers instead of MacOSX versions for the second short. Also, it seems that the 32bit "1" comes first on here. I don't know if I was mistaken on Lion. All of the first shorts are divisible by 4.

<table>
	<tr>
		<th>Offset</th>
		<th>Size</th>
		<th>Type</th>
		<th>Purpose</th>
	</tr>
	<tr>
		<td>0</td>
		<td>4</td>
		<td>uint32_t</td>
		<td>So far only a 1</td>
	</tr>
	<tr>
		<td>4</td>
		<td>2</td>
		<td>uint16_t</td>
		<td>Looks like an offset to something.</td>
	</tr>
	<tr>
		<td>6</td>
		<td>2</td>
		<td>uint16_t</td>
		<td>Build number? I've seen 1351, 1348, 1349</td>
	</tr>
</table>

Here is some sample data:

<table>
	<tr>
		<th>uint32</th>
		<th>uint16</th>
		<th>uint16</th>
	</tr>
	<tr>
		<td>1</td>
		<td>7376</td>
		<td>1351</td>	
	</tr>
	<tr>
		<td>1</td>
		<td>7760</td>
		<td>1351</td>	
	</tr>
	<tr>
		<td>1</td>
		<td>8176</td>
		<td>1351</td>	
	</tr>
	<tr>
		<td>1</td>
		<td>8560</td>
		<td>1351</td>	
	</tr>
	<tr>
		<td>1</td>
		<td>8976</td>
		<td>1351</td>	
	</tr>
	<tr>
		<td>1</td>
		<td>9360</td>
		<td>1351</td>	
	</tr>
	<tr>
		<td>1</td>
		<td>9776</td>
		<td>1351</td>	
	</tr>
	<tr>
		<td>1</td>
		<td>10144</td>
		<td>1351</td>	
	</tr>
</table>

***If anyone could shed some light on this it would be greatly appreciated. The data in question is in range 1400-2220 on 10.7.4's SArtFile.bin***

### Descriptor

12-byte header for a file. Each descriptor can contain multiple sub-image representations. It also contains a flag to indicate its type/purpose.

<table>
	<tr>
		<th>Offset</th>
		<th>Size</th>
		<th>Type</th>
		<th>Purpose</th>
	</tr>
	<tr>
		<td>0</td>
		<td>2</td>
		<td>uint16_t</td>
		<td>A flag indicating the type of image. 1 = retina_resource, 2 = legacy_resource, 3 = pdf</td>
	</tr>
	<tr>
		<td>2</td>
		<td>2</td>
		<td>uint16_t</td>
		<td>Amount of representations for the file.</td>
	</tr>
	<tr>
		<td>4</td>
		<td>4</td>
		<td>uint32_t</td>
		<td><b>Dropped in 10.8</b>: Unknown. Seems to be skipped over. Also, in the case of PDFs, it is the pdf data length - 47.</td>
	</tr>
	<tr>
		<td>8</td>
		<td>4</td>
		<td>uint32_t</td>
		<td><b>Dropped in 10.8</b>: Sum of each image's data length.</td>
	</tr>
	<tr>
		<td>12/4</td>
		<td>…</td>
		<td>…</td>
		<td>List of image headers. The amount listed has been specified already.</td>
	</tr>
</table>

### Image header

12-byte image header. Contains details required to access the image data and make sense of it.

<table>
	<tr>
		<th>Offset</th>
		<th>Size</th>
		<th>Type</th>
		<th>Purpose</th>
	</tr>
	<tr>
		<td>0</td>
		<td>2</td>
		<td>uint16_t</td>
		<td>Width of the image in pixels.</td>
	</tr>
	<tr>
		<td>2</td>
		<td>2</td>
		<td>uint16_t</td>
		<td>Height of the image in pixels.</td>
	</tr>
	<tr>
		<td>4</td>
		<td>4</td>
		<td>uint32_t</td>
		<td>Length of the image data.</td>
	</tr>
	<tr>
		<td>8</td>
		<td>4</td>
		<td>uint32_t</td>
		<td>Offset of the image data. This value is relative to the master offset specified in the beginning of the file.</td>
	</tr>
</table>

### File Data

All file data (except PDFs) is raw Unpremultiplied ARGB in little-endian (BGRA, bytes go backwards). The last representation is usually (so far always) the retina image with double resolution.

### PDFs

PDFs have a type of 3 (specified in the file descriptor). Their first file data (listed first for the file headers) is always regular PDF data. All PDFs have 3 representations: PDF, legacy image, retina image. There are representations for both sizes always coming with a PDF so that it can be displayed onscreen quickly without interpolation. The file header for PDFs shows its desired bounds size.


License
===================================
SArtFileTool is license under the `Simplified BSD License` – modified to forbid any commercial redistribution because I would prefer people not make commercial applications based off of this code. The theming community is supposed to be open and as the name implies: A community. The license in its entirety applies to all works in this GitHub repository and reproduced in its entirety as follows:


```
Copyright (c) 2011-2012, Alex Zielenski
All rights reserved.

Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
    * Any redistribution, use, or modification is done solely for personal benefit and not for any commercial purpose or for monetary gain

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

```

